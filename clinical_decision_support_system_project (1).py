# -*- coding: utf-8 -*-
"""Clinical Decision Support System Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lvacVPJfnz2brvbAC8u0DFBQiDGC3ZFM
"""

#Stephen Chikumbu R195933F
#Reuben Dembo R195894B
#Emmanuel Chinundu R195781K

from google.colab import files

uploaded = files.upload()

import pandas as pd 
import numpy as np

data = pd.read_csv('projectDataset.csv')

data_df =pd.DataFrame(data)
data_df.head()

data_df['NObeyesdad'].value_counts()

clean_data ={
    'NObeyesdad':{
        'Obesity_Type_I':1 ,
         'Obesity_Type_III':2,
         'Obesity_Type_II':3,
         'Overweight_Level_I':4,
         'Overweight_Level_II':5,
         'Normal_Weight':6,
         'Insufficient_Weight':7
    }
}

data_df = data_df.replace(clean_data)
data_df.head()

#data_df['NObeyesdad'] = pd.to_numeric(data_df['NObeyesdad'])

data_df.dtypes

data_df.describe()

import matplotlib.pyplot as plt
data.hist(bins=50 , figsize=(20,15))
plt.show()

from sklearn.model_selection import train_test_split
train_set,test_set = train_test_split(data,test_size = 0.2 , random_state =42)
print(len(train_set),'train + ',len(test_set),'test')

data_df['Gender'],_ =pd.factorize(data_df['Gender'])
data_df['family_history_with_overweight'],_ =pd.factorize(data_df['family_history_with_overweight'])
data_df['FAVC'],_ =pd.factorize(data_df['FAVC'])
data_df['CAEC'],_ =pd.factorize(data_df['CAEC'])
data_df['SMOKE'],_ =pd.factorize(data_df['SMOKE'])
data_df['CALC'],_ =pd.factorize(data_df['CALC'])
data_df['MTRANS'],_ =pd.factorize(data_df['MTRANS'])
data_df['SCC'],_ =pd.factorize(data_df['SCC'])

data_df.info()

corr_matrix = data_df.corr()
corr_matrix

corr_matrix['NObeyesdad'].sort_values(ascending=False)

data_new=data_df.drop(['CH2O','CALC','FCVC','Height','SMOKE','MTRANS','Gender','NCP','TUE','SCC','FAF'],axis=1)
data_new.head()

X=data_df.drop('NObeyesdad',axis=1)
Y=data_df['NObeyesdad']

X.head()

Y.head()

from sklearn.preprocessing import MinMaxScaler,StandardScaler

#scale=MinMaxScaler()
#X=scale.fit_transform(X)

Xtrain,Xtest,Ytrain,Ytest = train_test_split(X,Y,test_size=0.2,random_state=42)

Xtrain.shape

Xtest.shape

Ytrain.shape

Ytest.shape

from sklearn.metrics import mean_squared_error
data_predictions = lin_reg.predict(Xtest)
lin_mse = mean_squared_error(Ytest,data_predictions)
lin_rmse=np.sqrt(lin_mse)
lin_rmse

from sklearn.tree import DecisionTreeRegressor
tree_reg = DecisionTreeRegressor()
tree_reg.fit(Xtest,Ytest)

data_predictions = tree_reg.predict(Xtest)
tree_mse = mean_squared_error(Ytest,data_predictions)
tree_rmse = np.sqrt(tree_mse)
tree_rmse

y_pred = tree_reg.predict(Xtest)

from sklearn.metrics import r2_score
score = r2_score(Ytest,y_pred)

score

import pickle
Pkl_Filename = "obessity_classifier.pkl"  

with open(Pkl_Filename, 'wb') as file:  
    pickle.dump(tree_reg, file)

